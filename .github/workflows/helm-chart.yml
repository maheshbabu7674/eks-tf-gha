name: Deploy Helm Chart

on:
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up AWS CLI
      #   uses: aws-actions/setup-aws-cli@v2
      #   with:
      #     version: '2.x'  # Use the desired version of AWS CLI (default is 2.x)

      - name: Verify AWS CLI installation
        run: aws --version
        
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
        
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.27.1/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl 
          
      - name: Set up kubeconfig
        run: |
          aws eks update-kubeconfig --name example-cluster --region ap-south-1  

      - name: Set up Kubernetes context
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG_SECRET }}
        run: |
          mkdir -p $HOME/.kube  # Create the .kube directory
          echo "$KUBECONFIG_DATA" | base64 --decode > $HOME/.kube/config

      - name: Setup Helm
        uses: azure/setup-helm@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Specify the AWS region of your EKS cluster

      - name: Generate Unique Release Name
        id: generate-release-name
        run: echo "RELEASE_NAME=my-tomcat-helm-release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: List and Delete All Helm Releases
        run: |
          # List all Helm releases and delete each one
          releases=$(helm ls --namespace eks-npd --output json | jq -r '.[] | .name')
          
          if [ -n "$releases" ]; then
            echo "Deleting existing releases..."
            for release in $releases; do
              echo "Deleting release $release"
              helm uninstall "$release" --namespace eks-npd
            done
          else
            echo "No releases to delete."
          fi

      - name: Install New Helm Release
        run: |
          helm install ${{ env.RELEASE_NAME }} ./tomcat --namespace eks-npd
